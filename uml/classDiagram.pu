@startuml
package api
{
    package caches
    {
        class Cache
        {
            +{static}get<T extends Cacheable<T>>(): T[]
            +{static}getOrMake<T extends Cacheable<T>>(): T[]
            +{static}make<T extends Cacheable<T>>(): T[]
        }
        interface Cacheable<T>
        {
            +<<readonly>>key: string
            +<<readonly>>cacheSourceSheetID: string
            +fromSpreadsheet(spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet): T[]
            +toInstances(cached: object[]): T[]
        }
    }
    package logger
    {
        package "models "
        {
            class AccessInfo
            {
                +<<readonly>>room: RoomInfo
                +<<readonly>>member: Member
                +<<readonly>>type: AccessType
                +<<readonly>>time: Date
            }
            enum AccessType
            {
                ENTRY,
                EXIT
            }
        }
        class RoomAccessLogger
        {
            +{static}log(context: AccessInfo): void
        }
    }
    package models
    {
        package queries
        {
            class ID
            {
                +id: string
            }
            class NameAndCampus
            {
                +name: string
                +campus: string
            }
            abstract Query<T>
        }
        package responses
        {
            class Discord
            {
                +<<readonly>>id: string
                +<<readonly>>nickname: string
            }
            class Game
            {
                +<<readonly>>title: string
                +<<readonly>>id: string
            }
            class Member
            {
                +<<readonly>>id: number
                +<<readonly>>name: string
                +<<readonly>>discord: Discord
                +<<readonly>>games: Game[]
            }
            class Room
            {
                +<<readonly>>info: RoomInfo
                +<<readonly>>inmates: Member[]
                +entry(member: Member): void
                +exit(member: Member): void
            }
            class RoomInfo
            {
                +<<readonly>>campus: string
                +<<readonly>>name: string
            }
        }
        interface Response
        {
            +toJSON(): object
        }
        class APIResponse
        {
            +<<readonly>>state: ResultState
            +<<readonly>>message: string
            +<<readonly>>data: Response
            +{static}Success(response: DTO): APIResponse
            +{static}Failed(message: string): APIResponse
        }
        enum ResultState
        {
            SUCCESS,
            FAILED
        }
    }
    package routes
    {
        package controllers
        {
            package MemberController
            {
                class "Index" as MemberIndex
            }
            package RoomController
            {
                class "Index " as RoomIndex
                class Entry
                class Exit
            }
        }
        package " models"
        {
            interface Endpoint
            {
                +path: string
                +execute(parameter: object, postdata?: {[key: string]: any}): Result
            }
            package MethodType
            {
                interface Get
                {
                    +execute(parameter: object): Result
                }
                interface Post
                {
                    +execute(parameter: object, postdata: {[key: string]: any}): Result
                }
            }
        }
        class Route
        {
            {static}<<readonly>>_routes: Endpoint[]
            +{static}get(path: string): Endpoint
        }
    }
}
package utils
{
    package extensions
    {
        class Date
        {
            +{static}getDayToJapanese(): string
        }
        class String
        {
            +{static}insertAt(index: number, context: string): string
        }
    }
}

Query --|> ID
Query --|> NameAndCampus
Endpoint --|> Get
Endpoint --|> Post

Member .up.|> Response
Member .up.|> Cacheable
Room .up.|> Response
Room .up.|> Cacheable
MemberIndex .up.|> Get
Entry .up.|> Post
Exit .up.|> Post
RoomIndex .up.|> Get

Member "1" *-- "1" Discord
Member "1" *-- "*" Game
Room "1" *-- "1" RoomInfo
Room "1" *-- "*" Member
APIResponse "1" *-- "1" Response
Route "1" *-- "*" Endpoint

Cache --> Cacheable
AccessInfo --> Date
Room --> String
RoomAccessLogger --> AccessInfo
Endpoint --> APIResponse
MemberIndex --> ID
RoomIndex --> NameAndCampus

APIResponse +-- ResultState

@enduml