@startuml
package api
{
    package models
    {
        interface Response
        {
            +toJSON(): object
        }
        class Result
        {
            +<<readonly>>state: ResultState
            +<<readonly>>message: string
            +<<readonly>>data: Response
            +{static}Success(response: Response): Result
            +{static}Failed(message: string): Result
        }
        enum ResultState
        {
            SUCCESS,
            FAILED
        }
    }
    package routes
    {
        package controllers
        {
            package MemberController
            {
                class Index
            }
            package RoomController
            {
                class "Index "
                class Entry
                class Exit
            }
        }
        package " models"
        {
            interface Endpoint
            {
                +path: string
                +execute(query: {[key: string]: any}, postdata?: {[key: string]: any}): Result
            }
            package MethodType
            {
                interface Get
                {
                    +execute(query: {[key: string]: any}): Result
                }
                interface Post
                {
                    +execute(query: {[key: string]: any}, postdata: {[key: string]: any}): Result
                }
            }
        }
        class Route
        {
            -{static}<<readonly>>_routes: Endpoint[]
            +{static}get(path: string): Endpoint
        }
    }
}
package "controllers "
{
    class RoomAccessLogger
    {
        +{static}log(context: AccessInfo): void
    }
}
package "models "
{
    class AccessInfo
    {
        +<<readonly>>room: RoomInfo
        +<<readonly>>member: Member
        +<<readonly>>type: AccessType
        +<<readonly>>time: Date
    }
    enum AccessType
    {
        ENTRY,
        EXIT
    }
    class Discord
    {
        +<<readonly>>id: string
        +<<readonly>>nickname: string
    }
    class Game
    {
        +<<readonly>>title: string
        +<<readonly>>id: string
    }
    class Member
    {
        +<<readonly>>id: number
        +<<readonly>>name: string
        +<<readonly>>discord: Discord
        +<<readonly>>games: Game[]
    }
    class Room
    {
        +{static}<<readonly>>CACHE: RoomCache
        +<<readonly>>info: RoomInfo
        +<<readonly>>inmates: Member[]
        +{static}fromCacheOrDefault(info: RoomInfo): Room
        +entry(member: Member): void
        +exit(member: Member): void
    }
    class RoomInfo
    {
        +<<readonly>>campus: string
        +<<readonly>>name: string
    }
}
package utils
{
    package cached
    {
        class Cache
        {
            +{static}get<T extends Cacheable<T>>(): T[]
            +{static}getOrMake<T extends Cacheable<T>>(): T[]
            +{static}make<T extends Cacheable<T>>(): T[]
        }
        interface Cacheable<T>
        {
            +<<readonly>>key: string
            +<<readonly>>cacheSourceSheetID: string
            +fromSpreadsheet(spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet): T[]
            +toInstances(cached: object[]): T[]
        }
    }
    package extensions
    {
        class Date
        {
            +{static}getDayToJapanese(): string
        }
        class String
        {
            +{static}insertAt(index: number, context: string): string
        }
    }
}

Endpoint --|> Get
Endpoint --|> Post

Member .up.|> Response
Member .up.|> Cacheable
Room .up.|> Response
Room .up.|> Cacheable
Index .up.|> Get
Entry .up.|> Post
Exit .up.|> Post
"Index " .up.|> Get

Member "1" *-- "1" Discord
Member "1" *-- "*" Game
Room "1" *-- "1" RoomInfo
Room "1" *-- "*" Member
Result "1" *-- "1" Response
Route "1" *-- "*" Endpoint

Cache --> Cacheable
AccessInfo --> Date
Room --> String
RoomAccessLogger --> AccessInfo
Endpoint --> Result

@enduml